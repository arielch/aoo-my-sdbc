diff -uNrp a/mysql-connector-c++-1.1.1/cppconn/build_config.h b/mysql-connector-c++-1.1.1/cppconn/build_config.h
--- a/mysql-connector-c++-1.1.1/cppconn/build_config.h	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/cppconn/build_config.h	2012-08-30 19:44:17.574644272 -0300
@@ -27,25 +27,23 @@ with this program; if not, write to the
 #ifndef _SQL_BUILD_CONFIG_H_
 #define _SQL_BUILD_CONFIG_H_
 
-#ifndef CPPCONN_PUBLIC_FUNC
+#ifndef _SAL_TYPES_H_
+#include <sal/types.h>
+#endif
 
-#if defined(_WIN32)
- // mysqlcppconn_EXPORTS is added by cmake and defined for dynamic lib build only
-  #ifdef mysqlcppconn_EXPORTS
-    #define CPPCONN_PUBLIC_FUNC __declspec(dllexport)
-  #else
+// mysqlcppconn_EXPORTS is added by cmake and defined for dynamic lib build only
+#ifdef mysqlcppconn_EXPORTS
+    #define CPPCONN_PUBLIC_FUNC SAL_DLLPUBLIC_EXPORT
+#else
     // this is for static build
     #ifdef CPPCONN_LIB_BUILD
-      #define CPPCONN_PUBLIC_FUNC
+        #define CPPCONN_PUBLIC_FUNC
     #else
-      // this is for clients using dynamic lib
-      #define CPPCONN_PUBLIC_FUNC __declspec(dllimport)
+        // this is for clients using dynamic lib
+        #define CPPCONN_PUBLIC_FUNC SAL_DLLPUBLIC_IMPORT
     #endif
-  #endif
-#else
-  #define CPPCONN_PUBLIC_FUNC
 #endif
 
-#endif    //#ifndef CPPCONN_PUBLIC_FUNC
+#define CPPCONN_PUBLIC_EXCEPTION SAL_EXCEPTION_DLLPUBLIC_EXPORT
 
 #endif    //#ifndef _SQL_BUILD_CONFIG_H_
diff -uNrp a/mysql-connector-c++-1.1.1/cppconn/config.h b/mysql-connector-c++-1.1.1/cppconn/config.h
--- a/mysql-connector-c++-1.1.1/cppconn/config.h	1969-12-31 21:00:00.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/cppconn/config.h	2012-08-30 19:44:17.575644272 -0300
@@ -0,0 +1,34 @@
+#include <sal/types.h>
+
+#define HAVE_FUNCTION_STRTOL 1
+#define HAVE_FUNCTION_STRTOUL 1
+#define HAVE_FUNCTION_STRTOL 1
+#define HAVE_FUNCTION_STRTOULL 1
+
+#if defined(MACOSX) || defined(SOLARIS) || defined(LINUX)
+    #define HAVE_STDINT_H
+    #define HAVE_INTTYPES_H
+#endif
+
+#ifdef HAVE_STDINT_H
+#include <stdint.h>
+#endif
+
+#ifdef HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
+
+#if !defined(HAVE_STDINT_H) && !defined(HAVE_INTTYPES_H) 
+
+// if we do not have the standard C99 integer types, then define them based on the respective SAL types
+#if !defined(_SYS_TYPES_H)
+typedef sal_Int8    int8_t;
+typedef sal_Int16   int16_t;
+typedef sal_Int32   int32_t;
+#endif // !defined(_SYS_TYPES_H)
+typedef sal_uInt8   uint8_t;
+typedef sal_uInt16  uint16_t;
+typedef sal_uInt32  uint32_t;
+typedef sal_Int64   int64_t;
+typedef sal_uInt64  uint64_t;
+#endif // !defined(HAVE_STDINT_H) && !defined(HAVE_INTTYPES_H)
diff -uNrp a/mysql-connector-c++-1.1.1/cppconn/connection.h b/mysql-connector-c++-1.1.1/cppconn/connection.h
--- a/mysql-connector-c++-1.1.1/cppconn/connection.h	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/cppconn/connection.h	2012-08-30 19:44:18.080644232 -0300
@@ -28,7 +28,6 @@ with this program; if not, write to the
 #define _SQL_CONNECTION_H_
 
 #include <map>
-#include <boost/variant.hpp>
 
 #include "build_config.h"
 #include "warning.h"
@@ -37,8 +36,54 @@ with this program; if not, write to the
 namespace sql
 {
 
-
-typedef boost::variant<int, double, bool, sql::SQLString > ConnectPropertyVal;
+// hack around the non-existent ::boost::variant in OOo 3.1 build env
+struct ConnectPropertyVal
+{
+    sql::SQLString valString;
+    int            valInt;
+    bool           valBool;
+
+    ConnectPropertyVal()
+    {
+        reset();
+    }
+    ConnectPropertyVal( const sql::SQLString& _val )
+    {
+        *this = _val;
+    }
+    ConnectPropertyVal( const int _val )
+    {
+        *this = _val;
+    }
+    ConnectPropertyVal( const bool _val )
+    {
+        *this = _val;
+    }
+    ConnectPropertyVal& operator=( const sql::SQLString& _val )
+    {
+        reset();
+        valString = _val;
+        return *this;
+    }
+    ConnectPropertyVal& operator=( const int _val )
+    {
+        reset();
+        valInt = _val;
+        return *this;
+    }
+    ConnectPropertyVal& operator=( const bool _val )
+    {
+        reset();
+        valBool = _val;
+        return *this;
+    }
+    void reset()
+    {
+        valString = std::string();
+        valInt = 0;
+        valBool = false;
+    }
+};
 
 typedef std::map< sql::SQLString, ConnectPropertyVal > ConnectOptionsMap;
 
diff -uNrp a/mysql-connector-c++-1.1.1/cppconn/exception.h b/mysql-connector-c++-1.1.1/cppconn/exception.h
--- a/mysql-connector-c++-1.1.1/cppconn/exception.h	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/cppconn/exception.h	2012-08-30 19:44:18.260644219 -0300
@@ -52,7 +52,7 @@ namespace sql
 #pragma warning(push)
 #pragma warning(disable: 4275)
 #endif
-class CPPCONN_PUBLIC_FUNC SQLException : public std::runtime_error
+class CPPCONN_PUBLIC_EXCEPTION SQLException : public std::runtime_error
 {
 #ifdef _WIN32
 #pragma warning(pop)
@@ -98,26 +98,26 @@ protected:
 	MEMORY_ALLOC_OPERATORS(SQLException)
 };
 
-struct CPPCONN_PUBLIC_FUNC MethodNotImplementedException : public SQLException
+struct CPPCONN_PUBLIC_EXCEPTION MethodNotImplementedException : public SQLException
 {
 	MethodNotImplementedException(const MethodNotImplementedException& e) : SQLException(e.what(), e.sql_state, e.errNo) { }
 	MethodNotImplementedException(const std::string& reason) : SQLException(reason, "", 0) {}
 };
 
-struct CPPCONN_PUBLIC_FUNC InvalidArgumentException : public SQLException
+struct CPPCONN_PUBLIC_EXCEPTION InvalidArgumentException : public SQLException
 {
 	InvalidArgumentException(const InvalidArgumentException& e) : SQLException(e.what(), e.sql_state, e.errNo) { }
 	InvalidArgumentException(const std::string& reason) : SQLException(reason, "", 0) {}
 };
 
-struct CPPCONN_PUBLIC_FUNC InvalidInstanceException : public SQLException
+struct CPPCONN_PUBLIC_EXCEPTION InvalidInstanceException : public SQLException
 {
 	InvalidInstanceException(const InvalidInstanceException& e) : SQLException(e.what(), e.sql_state, e.errNo) { }
 	InvalidInstanceException(const std::string& reason) : SQLException(reason, "", 0) {}
 };
 
 
-struct CPPCONN_PUBLIC_FUNC NonScrollableException : public SQLException
+struct CPPCONN_PUBLIC_EXCEPTION NonScrollableException : public SQLException
 {
 	NonScrollableException(const NonScrollableException& e) : SQLException(e.what(), e.sql_state, e.errNo) { }
 	NonScrollableException(const std::string& reason) : SQLException(reason, "", 0) {}
diff -uNrp a/mysql-connector-c++-1.1.1/driver/mysql_connection.cpp b/mysql-connector-c++-1.1.1/driver/mysql_connection.cpp
--- a/mysql-connector-c++-1.1.1/driver/mysql_connection.cpp	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/driver/mysql_connection.cpp	2012-08-30 19:44:18.262644217 -0300
@@ -68,6 +68,33 @@ with this program; if not, write to the
 #include "mysql_warning.h"
 #include "mysql_debug.h"
 
+// part II of the hack to make C/C++ compile in an OOo env which doesn't have boost::variant installed
+namespace boost
+{
+    template < class TYPE >
+    const TYPE* get( const sql::ConnectPropertyVal* val )
+    {
+        return val;
+    }
+
+    template < >
+    const sql::SQLString* get< sql::SQLString >( const sql::ConnectPropertyVal* val )
+    {
+        return &val->valString;
+    }
+
+    template < >
+    const int* get< int >( const sql::ConnectPropertyVal* val )
+    {
+        return &val->valInt;
+    }
+
+    template < >
+    const bool* get< bool >( const sql::ConnectPropertyVal* val )
+    {
+        return &val->valBool;
+    }
+}
 
 namespace sql
 {
@@ -425,6 +452,8 @@ void MySQL_Connection::init(ConnectOptio
 		}
 	}
 
+   int default_protocol_tcp = MYSQL_PROTOCOL_TCP;
+   proxy->options(MYSQL_OPT_PROTOCOL, (const char *) &default_protocol_tcp);
 
 	/* libmysql shouldn't think it is too smart */
 	if (tcpProtocol(uri) && !uri.Host().compare(util::LOCALHOST)) {
diff -uNrp a/mysql-connector-c++-1.1.1/driver/mysql_debug.h b/mysql-connector-c++-1.1.1/driver/mysql_debug.h
--- a/mysql-connector-c++-1.1.1/driver/mysql_debug.h	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/driver/mysql_debug.h	2012-08-30 19:44:18.262644217 -0300
@@ -40,16 +40,6 @@ with this program; if not, write to the
 
 
 
-#if defined(WE_HAVE_VARARGS_MACRO_SUPPORT) && (CPPCONN_TRACE_ENABLED || defined(SAL_DLLPRIVATE))
-	#define CPP_ENTER(msg)			const boost::shared_ptr< MySQL_DebugLogger > __l = this->logger;(void)__l;\
-									MySQL_DebugEnterEvent __this_func(__LINE__, __FILE__, msg, this->logger)
-	#define CPP_ENTER_WL(l, msg)	const boost::shared_ptr< MySQL_DebugLogger > __l = (l);(void)__l;\
-									MySQL_DebugEnterEvent __this_func(__LINE__, __FILE__, msg, (l))
-	#define CPP_INFO(msg)		{if (__l) __l->log("INF", msg); }
-	#define CPP_INFO_FMT(...)	{if (__l) __l->log_va("INF", __VA_ARGS__); }
-	#define CPP_ERR(msg)		{if (__l) __l->log("ERR", msg); }
-	#define CPP_ERR_FMT(...)	{if (__l) __l->log_va("ERR", __VA_ARGS__); }
-#else
 	#define CPP_ENTER(msg)
 	#define CPP_ENTER_WL(l, msg)
 	#define CPP_INFO(msg)
@@ -57,7 +47,6 @@ with this program; if not, write to the
 	#define CPP_ENTER_WL(l, msg)
 	static inline void CPP_INFO_FMT(...) {}
 	static inline void CPP_ERR_FMT(...) {}
-#endif
 
 #include <stack>
 #include "mysql_util.h"
diff -uNrp a/mysql-connector-c++-1.1.1/driver/nativeapi/binding_config.h b/mysql-connector-c++-1.1.1/driver/nativeapi/binding_config.h
--- a/mysql-connector-c++-1.1.1/driver/nativeapi/binding_config.h	1969-12-31 21:00:00.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/driver/nativeapi/binding_config.h	2012-08-30 19:44:18.263644217 -0300
@@ -0,0 +1,38 @@
+/*
+   Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.
+
+   The MySQL Connector/C++ is licensed under the terms of the GPLv2
+   <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most
+   MySQL Connectors. There are special exceptions to the terms and
+   conditions of the GPL as it is applied to this software, see the
+   FLOSS License Exception
+   <http://www.mysql.com/about/legal/licensing/foss-exception.html>.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published
+   by the Free Software Foundation; version 2 of the License.
+
+   This program is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
+   for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
+*/
+
+
+#define HAVE_DLFCN_H 1
+//#define MYSQLCLIENT_STATIC_BINDING 1
+
+
+/*
+#if !defined(_WIN32) && !defined(HAVE_DLFCN_H) && !defined(MYSQLCLIENT_STATIC_BINDING)
+# define MYSQLCLIENT_STATIC_BINDING 1
+#endif
+
+#ifdef HAVE_DLFCN_H
+#include <dlfcn.h>
+#endif
+*/
diff -uNrp a/mysql-connector-c++-1.1.1/driver/nativeapi/libmysql_dynamic_proxy.cpp b/mysql-connector-c++-1.1.1/driver/nativeapi/libmysql_dynamic_proxy.cpp
--- a/mysql-connector-c++-1.1.1/driver/nativeapi/libmysql_dynamic_proxy.cpp	2012-08-06 15:19:06.000000000 -0300
+++ b/mysql-connector-c++-1.1.1/driver/nativeapi/libmysql_dynamic_proxy.cpp	2012-08-30 19:49:49.195619764 -0300
@@ -39,11 +39,11 @@ namespace NativeAPI
 #if defined(_WIN32)
 static const char * const baseName = "libmysql.dll";
 #elif defined(__APPLE__)
-static const char * const baseName = "libmysqlclient_r.dylib";
+static const char * const baseName = "libmysql.dylib";
 #elif defined(__hpux) && defined(__hppa)
-static const char * const baseName = "libmysqlclient_r.sl";
+static const char * const baseName = "libmysql.sl";
 #else
-static const char * const baseName = "libmysqlclient_r.so";
+static const char * const baseName = "libmysql.so";
 #endif
 
 template<typename FunctionType>
